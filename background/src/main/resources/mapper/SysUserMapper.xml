<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sast.user.mapper.SysUserMapper">

    <resultMap id="roleResultMap" type="SysRole">
        <result property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
    </resultMap>
    <select id="getGroupByUserId" resultMap="roleResultMap" parameterType="int">
        SELECT user_role.user_id user_id, role.role_id role_id, role.role_name role_name
        FROM security.user_role,
             security.role
        WHERE user_role.user_id = #{uid}
          AND user_role.role_id = role.role_id
    </select>

    <resultMap id="userResult" type="SysUser">
        <result property="username" column="user_name"/>
        <result property="realName" column="real_name"/>
        <result property="studentId" column="student_id"/>
        <result property="uid" column="uid"/>
        <collection property="sysRoles" javaType="ArrayList" ofType="Roles" column="uid" select="getGroupByUserId"/>
    </resultMap>
    <select id="selectByName" resultMap="userResult" parameterType="String">
        SELECT *
        FROM security.user
        WHERE user_name = #{username}
    </select>

    <select id="selectById" resultMap="userResult" parameterType="int">
        SELECT *
        FROM security.user
        WHERE uid = #{id}
    </select>

    <select id="selectByMail" resultMap="userResult" parameterType="String">
        SELECT *
        FROM security.user
        WHERE mail = #{mail}
    </select>

    <select id="selectByStudentId" resultMap="userResult" parameterType="String">
        SELECT *
        FROM security.user
        WHERE student_id = #{id}
    </select>

    <select id="selectAll" resultMap="userResult">
        SELECT *
        FROM security.user
        WHERE true
    </select>

    <select id="fuzzySearch" resultMap="userResult" parameterType="String">
        SELECT *
        FROM security.user
        WHERE user_name REGEXP #{keyword}
           OR real_name REGEXP #{keyword}
           OR mail REGEXP #{keyword}
           OR student_id REGEXP #{keyword}
    </select>

    <select id="selectRoleByName" parameterType="String" resultMap="roleResultMap">
        SELECT *
        FROM security.role
        WHERE role_name = #{name}
    </select>

    <select id="selectAllRoles" resultType="SysRole">
        SELECT *
        FROM security.role
    </select>

    <select id="queryPasswordByUsername" parameterType="String" resultType="String">
        SELECT password
        FROM security.user
        WHERE user_name = #{username}
    </select>

    <insert id="addUser" parameterType="SysUser">
        INSERT INTO security.user (user_name, password, mail, real_name, student_id)
        VALUES (#{username}, #{password}, #{mail}, #{realName}, #{studentId});
        <selectKey order="AFTER" keyProperty="uid" keyColumn="uid" resultType="int">
            select last_insert_id()
        </selectKey>

    </insert>

    <insert id="batchAddUser" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO security.user (user_name, password, mail, real_name, student_id)
        VALUES
        <foreach collection="userList" item="user" open="(" close=")" separator="),(">
            #{user.username},
            #{user.encryptedPassword},
            #{user.mail},
            #{user.realName},
            #{user.studentId}
        </foreach>
    </insert>

    <insert id="addRoleByUserId" parameterType="int">
        INSERT INTO security.user_role (user_id, role_id)
        VALUES
        <foreach collection="roles" item="role" open="(" close=")" separator="),(">
            #{uid},
            #{role.roleId}
        </foreach>
    </insert>

    <insert id="batchAddRole" useGeneratedKeys="true">
        INSERT INTO security.user_role (user_id, role_id) VALUES
        <foreach collection="roleList" item="role" open="(" close=")" separator="),(">
            #{role.i},
            #{role.j}
        </foreach>
    </insert>

    <update id="updateUserNameById">
        UPDATE security.user
        SET user_name = #{userName}
        WHERE uid = #{uid}
    </update>

    <update id="updatePasswordById">
        UPDATE security.user
        SET password = #{password}
        WHERE uid = #{uid}
    </update>

    <update id="updateMailById">
        UPDATE security.user
        SET mail = #{mail}
        WHERE uid = #{uid}
    </update>

    <update id="updateRealNameById">
        UPDATE security.user
        SET real_name = #{realName}
        WHERE uid = #{uid}
    </update>

    <delete id="deleteUserById">
        DELETE
        FROM security.user_role
        WHERE user_id = #{uid};
        DELETE
        FROM security.user
        WHERE uid = #{uid};
    </delete>

    <delete id="deleteRoleById" parameterType="int">
        DELETE
        FROM security.user_role
        WHERE user_id = #{uid};
    </delete>
</mapper>